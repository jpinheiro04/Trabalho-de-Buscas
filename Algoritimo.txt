

#TODO: 1. Definir constantes, representar o grafo, e a tabela de soluções.
DISTANCE = 0
PREVIOUS_NODE = 1
INFINITY = float("inf")

graph = ()
graph["A"] = {"B":5, "D":9, "E":2}
graph["B"] = {"A":5, "C":2}
graph["C"] = {"B":2, "D":3}
graph["D"] = {"A":9, "F":2, "C":3}
graph["E"] = {"A":2, "F":3}
graph["F"] = {"E":3, "D:"2}

table = (

"A": [0, None],
"B": [INFINITY, None], 
"C": [INFINITY, None], 
"D": [INFINITY, None], 
"E": [INFINITY, None], 
"F": [INFINITY, None]
)

#TODO: 2. Definir funções auxiliares


def get_shortest_distance(table, vertex):

""""
Função que retorna a distancia mais curta de um só nó origem olhando a tabela de soluções
""""
return table[vertex][DISTANCE]


def set_shortest_distance(tabela, vertex, distance):

""""
Atualiza a distancia mais curta de um nó
""""
table[vertex][DISTANCE] = distance


def set_previous_node(tabela, vertex, node):

"""
Atualiza o nó antecessor  
"""
table[vertex][PREVIOUS_NODE] = node

def get_distance(graph, first_vertex, second_vertex):

"""
Retornar a distancia entre dois pontos 
"""
return graph[first_vertex][second_vertex]:


def get_next_node(table, visited_nodes):


    unvisited = list(
        set(
            table.keys()
        ).difference(visited_nodes)
    )

    min_distance = table[unvisited][0][DISTANCE]
    vertex = unvisited[0]

    for node in unvisited: 
        if table[node][DISTANCE] < min_distance
            min_distance = table[node][DISTANCE]
            vextex = table[node]
            
return vertex


"""
Retorno o proximo nó não visitado, com a menor distancia a partir da origem.
"""


#TODO 3. Criar uma função principal para orquestrar a resolução do problema 

def find_shortest_path(graph, table, origin):

"""
Função que encontra a rota mais curta dada a origem
"""

visited = []
current_node = origin
starting_node = origin

    while true:
        adjacent_nodes = graph[current_node]

        if set(adjacent_nodes).issubset(set(visited)):
            ...
        else:
            unvisited = set(adjacent_nodes).difference(set(visited))

            for vertex in unvisited:
                distance_from_starting_node = get_shortest_distance(table,vextex)

                if (distance_from_starting_node == INFINITY) and (current_node == starting_node):
                        total_distance = get_distance(graph, vertex, current_node)
                else:
                    total_distance = get_shortest_distance(table, current_node) + get_distance(graph, current_node)

        
        
                if total_distance < distance_from_starting_node:
                set_shortest_distance(table,vextex, total_distance) 
                set_previous_node(table, vertex, current_node)

                visited.append(current_node)


                if len(visited) == len(table.keys()):
                break              

        current_node = get_next_node(table, visited)
    return table